Go
	Static Typed, Compiled, Garbage Collected(Latency Free), Concurrent 
	Type Safe and memory Safe
	Fast Compile Times
	No Inheritance, Assertion, Gerneric Programming, Overloading
	
	
	Packages
		Code Modularization
		Types and Function
		
	Imports
		Source Code
		Local packages
		Remote Packages
	
	GOROOT
	GOPATH
	Commands
		run
		build
		install
		
	Types
		bool, string, int [int, 8, 16, 32, 64], uint [uint, 8, 16, 32, 64, uintptr], byte(uint8), rune(int32, like a char), float32, float64, complex64, complex128
		Array, Slice, Struct, Pointer, Function, Interface, Map, Channel
		
		
	User Defined Types
		Extend base types
		Structs
		
	Pointer
		Assignment
		Dereference
		Address operator
		
	constants
		const(
			PI = 3.14
			Language = "Go"
		)
		const(
			A = iota (0)
			B (1)
			C (2)
		)

	functions
		data type
		multiple returns
			_
		named returns
		function literals
			closure
		variadic function
		function types
		
	Branching
		if statement
			Embedded statement
			else statment
		switch statment
				no default fall through
				fallthrough
				dont need an expression
					defaults to true
					cases to be booleans
				cases can be expressions
					multiple values seperated by comma
				switch on types
					argument as empty interface x interface {} void pointer
					t := x.(type)

	Looping
		condition
		break
		continue
		clause(init;cond;post)
		Range
			Array/slice/map
				index, value for each index
			String
				rune
			Channel
				data in channel

	Maps
		key to have eqality operator defined
		reference types
		not thread safe!
		make
		create, update, delete
		check for existance
			value, exists = map[key]

	Slices
	Methods/Interface
	Concurrency
		go routines
		channel
			set chan <- value
			get value <- chan
		make(chann type)
		range
		select
		

	
				
		
		
		
		
	